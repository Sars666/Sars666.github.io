<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>SwiftUIx学习-day-4＆5</title>
      <link href="/2020/02/10/SwiftUIx%E5%AD%A6%E4%B9%A0-day-4%EF%BC%865/"/>
      <url>/2020/02/10/SwiftUIx%E5%AD%A6%E4%B9%A0-day-4%EF%BC%865/</url>
      
        <content type="html"><![CDATA[<h2 id="SwiftUI-day4-p13-p16"><a href="#SwiftUI-day4-p13-p16" class="headerlink" title="SwiftUI day4 (p13-p16)"></a>SwiftUI day4 (p13-p16)</h2><ol><li><p>导航视图</p> <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">NavigationView&#123;</span><br><span class="line">    List(0 ..&lt;5) &#123; item in </span><br><span class="line">        NavigationLink(destination: Text(&quot;1&quot;)) &#123;</span><br><span class="line">            Text(&quot;Navigate 1&quot;)</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        .navigationBarTitle(Text(&quot;Updates&quot;))</span><br><span class="line">        .navigationBarItems(</span><br><span class="line">            leading: Button(action: addUpdate) &#123;Image(systemName: &quot;plus&quot; &#125;,</span><br><span class="line">            trailing: PresentationLink(destination: Text(&quot;Settings&quot;) &#123;</span><br><span class="line">                    Image(systemName: &quot;gear&quot;)</span><br><span class="line">            &#125;</span><br><span class="line">        )</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>给文本Text加frame的时候一定要加上alignment，否则文本不会对齐框</p><a id="more"></a></li><li><p>数据外置</p> <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;&#x2F;UpdateStore.swift</span><br><span class="line">import SwiftUI</span><br><span class="line">import Combine</span><br><span class="line">class UpdateStore: BindableObject &#123;</span><br><span class="line">    var didChange &#x3D; PassthroughSubject&lt;Void, Never&gt;()   &#x2F;&#x2F;传递数据   </span><br><span class="line">    var updates: [Update] &#123;</span><br><span class="line">        didSet &#123;</span><br><span class="line">            didChange.send()    &#x2F;&#x2F;在数据修改时发送数据</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    init(updates:  [Update] &#x3D; []) &#123;</span><br><span class="line">        self.updates &#x3D; updates  &#x2F;&#x2F;初始化</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure> <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;&#x2F;UpdateList.swift</span><br><span class="line">struct UpdateList: View&#123;</span><br><span class="line">    var updates &#x3D; updateData                                    &#x2F;&#x2F;静态数据</span><br><span class="line">    @ObjectBinding var store &#x3D; UpdateStore(updates: updateData) &#x2F;&#x2F;实时更新</span><br><span class="line">    func addUpdate() &#123;                                          &#x2F;&#x2F;添加数据</span><br><span class="line">        store.updates.append(Update(...newData...))</span><br><span class="line">    &#125;</span><br><span class="line">    var body: some View&#123;</span><br><span class="line">    ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>导航List中item的删除</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">ForEach(store.updates) &#123; item in</span><br><span class="line">    ...</span><br><span class="line">&#125;.onDelete &#123; index in</span><br><span class="line">    self.store.updates.remove(at: index.first!)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>导航List中item的排序</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">func move(form source: IndexSet, to destination: Int) &#123;</span><br><span class="line">    store.updates.swapAt(source.first!, destination)</span><br><span class="line">&#125;</span><br><span class="line">...</span><br><span class="line">ForEach(store.updates) &#123; item in</span><br><span class="line">    ...</span><br><span class="line">&#125;.onMove(perform: move)</span><br></pre></td></tr></table></figure></li><li><p>导航List编辑按钮</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">.navigationBarTitle(Text(&quot;List&quot;))</span><br><span class="line">.navigationBarItems(trailing:</span><br><span class="line">    EditButton()</span><br><span class="line">)</span><br></pre></td></tr></table></figure></li><li><p>标签栏设置</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">TabbedView&#123;</span><br><span class="line">    Home() .tabItem(</span><br><span class="line">        VStack&#123;</span><br><span class="line">            Image(&quot;IconHome&quot;)</span><br><span class="line">            Text(&quot;Home&quot;)</span><br><span class="line">        &#125;</span><br><span class="line">        )</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>标签栏编号设置<code>Home().tabItem().tag(2)</code></p></li><li><p><strong>APP初始视图</strong>在<code>SceneDelegate.swift</code>中修改<br> <code>window.rootViewController = UIHostingController(rootView: TabBar()&lt;-视图名 )</code></p></li></ol><h2 id="SwiftUI-day5-p17-p21"><a href="#SwiftUI-day5-p17-p21" class="headerlink" title="SwiftUI day5 (p17-p21)"></a>SwiftUI day5 (p17-p21)</h2><ol><li><p>DarkMode黑暗模式设置<br> 将颜色设置为一个<code>BlurView</code>的对象，在黑暗模式下，颜色会自动切换<br> <code>BlurView(style: .systemMaterial)</code><br> 对于Icon来说，将颜色改为primary就会自动实现黑白切换<br> <code>Image().foregroundColor(.primary)</code></p></li><li><p>设置视图<br> 常用NavigationView来建立</p> <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;&#x2F;Settings.swift</span><br><span class="line">import SwiftUI</span><br><span class="line">struct Settings : View&#123;</span><br><span class="line">    </span><br><span class="line">    @State var receive &#x3D; false</span><br><span class="line">    @State var number &#x3D; 1</span><br><span class="line">    @State var selection &#x3D; 1</span><br><span class="line">    @State var date &#x3D; Date()</span><br><span class="line">    @State var email &#x3D; &quot;&quot;</span><br><span class="line">    @State var submit &#x3D; false    </span><br><span class="line">    var body: some View&#123;</span><br><span class="line">        NavigationView&#123;</span><br><span class="line">            Form&#123;</span><br><span class="line">                Toggle(isOn: $receive) &#123;</span><br><span class="line">                    Text(&quot;Receive notifications&quot;)</span><br><span class="line">                &#125;</span><br><span class="line">                Stepper(value: $number, in: 1...10) &#123;</span><br><span class="line">                    Text(&quot;\(number) Notification\(number &gt; 1? &quot;s&quot; : &quot;&quot;) per week&quot;)</span><br><span class="line">                &#125;</span><br><span class="line">                Picker(selection: $selection, label: Text(&quot;Favorite course&quot;)) &#123;</span><br><span class="line">                    Text(&quot;SwiftUI&quot;).tag(1)</span><br><span class="line">                    Text(&quot;React&quot;).tag(2)</span><br><span class="line">                &#125;</span><br><span class="line">                DatePicker($date) &#123;</span><br><span class="line">                    Text(&quot;Date&quot;)</span><br><span class="line">                &#125;</span><br><span class="line">                Section(header: Text(&quot;Email&quot;)) &#123;</span><br><span class="line">                    TextField(&quot;Your email&quot;, text: $email)</span><br><span class="line">                        .textFieldStyle(.roundedBorder)</span><br><span class="line">                &#125;</span><br><span class="line">                Button(action: &#123; self.submit.toggle() &#125;)&#123;</span><br><span class="line">                Text(&quot;Submit&quot;)</span><br><span class="line">                &#125;</span><br><span class="line">                .presentation($submit, alert: &#123;</span><br><span class="line">                    Alert(title: Text(&quot;Thanks!&quot;), message: Text(&quot;Email: \(email)&quot;))</span><br><span class="line">                &#125;)</span><br><span class="line">            &#125;</span><br><span class="line">            .navigationBarTitle(&quot;Settings&quot;)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol>]]></content>
      
      
      
        <tags>
            
            <tag> IOS </tag>
            
            <tag> SwiftUI </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>SwiftUIx学习-day-3</title>
      <link href="/2020/02/10/SwiftUIx%E5%AD%A6%E4%B9%A0-day-3/"/>
      <url>/2020/02/10/SwiftUIx%E5%AD%A6%E4%B9%A0-day-3/</url>
      
        <content type="html"><![CDATA[<h2 id="SwiftUI-day3-p9-p12"><a href="#SwiftUI-day3-p9-p12" class="headerlink" title="SwiftUI day3 (p9-p12)"></a>SwiftUI day3 (p9-p12)</h2><ol><li><p>用图片做按钮</p> <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Button(action: ...)&#123;</span><br><span class="line">    Image(systemName: &quot;list.dash&quot;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>将按钮放在左上角</p> <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">ZStack(alignment: .topLeading)&#123;</span><br><span class="line">    ...</span><br><span class="line">    Spacer()</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>背景投影</p> <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">.background(Color(&quot;backgroundX&quot;)) </span><br><span class="line">.shadow(color: Color(&quot;backgroundShadowX&quot;), radius: 20, x: 0, y: 20) </span><br><span class="line">&#x2F;&#x2F;颜色在asserts里面自定义，阴影色为透明度0.3的背景色</span><br></pre></td></tr></table></figure><a id="more"></a></li><li><p>滚动视图，并且不显示滚动条<code>ScrollView(.horizontal, showsIndicators: false){}</code></p></li><li><p>视图嵌入</p> <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">PresentationLink(destination: ContentView())&#123;</span><br><span class="line">    CourseView()</span><br><span class="line">&#125;</span><br><span class="line">&#x2F;&#x2F;这里会有一个问题，就是会将CourseView()视作一个按钮，导致背景图片</span><br><span class="line">&#x2F;&#x2F;被按钮的颜色填充，需要对CourseView中的图片进行以下设置</span><br><span class="line">Image(&quot;Illustration1&quot;)</span><br><span class="line">    .renderingMode(.original)</span><br></pre></td></tr></table></figure></li><li><p>模糊特效</p> <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">HomeList()</span><br><span class="line">    .blur(radius: show ? 20: 0) &#x2F;&#x2F;点击后会有一个模糊特效</span><br><span class="line">    .scaleEffect(showProfile? 0.95: 1) &#x2F;&#x2F; 点击后整体会有一个缩小的效果</span><br><span class="line">    .animation(.default) &#x2F;&#x2F;模糊特效的动画过渡</span><br></pre></td></tr></table></figure></li></ol>]]></content>
      
      
      
        <tags>
            
            <tag> IOS </tag>
            
            <tag> SwiftUI </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>SwiftUIx学习-day-2</title>
      <link href="/2020/02/10/SwiftUIx%E5%AD%A6%E4%B9%A0-day-2/"/>
      <url>/2020/02/10/SwiftUIx%E5%AD%A6%E4%B9%A0-day-2/</url>
      
        <content type="html"><![CDATA[<h2 id="SwiftUI-day2-p5-p8"><a href="#SwiftUI-day2-p5-p8" class="headerlink" title="SwiftUI day2 (p5-p8)"></a>SwiftUI day2 (p5-p8)</h2><ol><li><p>手势的实现</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">@State var viewState &#x3D; CGSize.zero</span><br><span class="line">CardView()</span><br><span class="line">    .gesture(</span><br><span class="line">        DragGesture()</span><br><span class="line">            .onChanged&#123; value in </span><br><span class="line">                self.viewState &#x3D; value.translation &#x2F;&#x2F; 这里可以同时应用动画self.show &#x3D; true</span><br><span class="line">            &#125;</span><br><span class="line">            .onEnded&#123; value in </span><br><span class="line">                self.viewState &#x3D; CGSize.zero</span><br><span class="line">            &#125;</span><br><span class="line">    .offset( x: viewState.width, y: viewState.height )  &#x2F;&#x2F;也可以单方向</span><br><span class="line">    )</span><br></pre></td></tr></table></figure><p>注意animation-initialVelocity要设置为0</p><a id="more"></a></li><li><p>应用SF Symbols图标</p> <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">Image( systemName: &quot;creditcard&quot;)</span><br><span class="line">    .imageScale(.large)</span><br><span class="line">    .foregroundColor(Color(&quot;icons&quot;))</span><br><span class="line">    .frame(width:32, height:32)</span><br></pre></td></tr></table></figure></li><li><p>在子视图中添加变量，就可在之后应用<code>var image = creditcard</code></p></li><li><p>尽量不要使用带有右下角叹号的SF Symbols</p></li><li><p>使用列表来创建视图：<br> 创建结构-&gt; 创建结构实例的列表 -&gt; 在主视图中定义列表变量<code>var menu = menuData</code>-&gt; 在body视图中使用ForEach</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">    &#x2F;&#x2F;创建结构</span><br><span class="line">    struct Menu: Identifiable &#123;</span><br><span class="line">        var id  &#x3D; UUID() &#x2F;&#x2F;主键</span><br><span class="line">        var title : String</span><br><span class="line">        var icon : String</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;&#x2F;ForEach用法</span><br><span class="line">ForEach(menu) &#123; item in </span><br><span class="line">    MenuRow(image: menu.icon, text: menu.title)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>菜单栏的弹出:<br> 首先将菜单栏放在ZStack里面，添加一个按钮改变offset值，再加上动画即可</p></li><li><p>为了获取屏幕宽度，使用<code>UIScreen.main.bounds.width</code></p></li><li><p>菜单栏的关闭<code>.tapAction{ self.show.toggle() }</code></p></li><li><p><strong>子视图与主视图的交互</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">struct Home : View &#123; </span><br><span class="line">    @State var show &#x3D; false</span><br><span class="line">    ...</span><br><span class="line">    MenuView( show: $show) &#x2F;&#x2F;美元符号表示监听并发送数据</span><br><span class="line">    ...</span><br><span class="line">&#125;</span><br><span class="line">struct MenuView : View &#123; </span><br><span class="line">    @Binding var show : Bool</span><br><span class="line">        ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol>]]></content>
      
      
      
        <tags>
            
            <tag> IOS </tag>
            
            <tag> SwiftUI </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>SwiftUIx学习 - day 1</title>
      <link href="/2020/01/31/SwiftUIx%E5%AD%A6%E4%B9%A0-day-1/"/>
      <url>/2020/01/31/SwiftUIx%E5%AD%A6%E4%B9%A0-day-1/</url>
      
        <content type="html"><![CDATA[<p> 之前有阅读过苹果官方给的文档，看了个大概，知道基本功能有哪些，但亲自编程还是有点困难。导师让我寒假学习IOS编程，我觉得学习swiftUI是最快的方式，毕竟可以直接得到能用的APP, 而且界面也很完美</p><p> 今天开始学习SwiftUI<br> 教程：<a href="https://www.bilibili.com/video/av64681507" target="_blank" rel="noopener">https://www.bilibili.com/video/av64681507</a></p><h2 id="SwiftUI-day1-p1-p4"><a href="#SwiftUI-day1-p1-p4" class="headerlink" title="SwiftUI day1 (p1-p4)"></a>SwiftUI day1 (p1-p4)</h2><ol><li><p>图片大小调整：</p> <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Image(&quot;Pic0&quot;)</span><br><span class="line">    .resiziable()</span><br><span class="line">    .frame(width: 30.0, height: 30.0)</span><br></pre></td></tr></table></figure></li><li><p>VStack+ HStack 用于布局元素</p></li><li><p>阴影shadow 看起来很棒，但是位置很重要，一般放在最后. 投影需要设置背景</p></li><li><p>ZStack 用于规划图形的深浅</p><a id="more"></a></li><li><p>offset用于图形位置偏移，很有用</p></li><li><p>Extract Subview 可以将已经写好的View定义成一个类，便于重复使用。注意这些类都是可以添加新方法的。</p></li><li><p>scaleEffect 可以用于调整已经定义好的View的大小</p></li><li><p>顺时针旋转View <code>rotationEffect (Angle(degrees: 90))</code></p></li><li><p>rotation3DEffect: 3D旋转效果</p></li><li><p>blendMode混合模式，可以用于设计版面时的透视，可以用darken, softlight, hardlight等等</p></li><li><p>Spacer()很好用，可以把item往另外一边推</p></li><li><p>lineLimit–调整文本Text行数</p></li><li><p>Stack也是可以设置行距的：<code>VStack(spacing: 20.0){...}</code></p></li><li><p>var ? trueValue : falseValue    <code>show ? 30 : 0</code></p></li><li><pre><code>.animation(.basic(duration: 0.35, curve: .easeInOut)) //默认值// duration是动画持续时间// curve是变化曲线：    - easeIn 进入较慢，然后变快    - easeOut 退出较慢，之前较快    - easeInOut 进入退出都较慢.animation(.spring)     //弹簧特效.animation(.default)    //背景模糊设置每个动画效果参数都可以自定义，具体按住command点击对应的特效查看文档颜色也可以作为动画参数来变化</code></pre></li></ol>]]></content>
      
      
      
        <tags>
            
            <tag> IOS </tag>
            
            <tag> SwiftUI </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Github + Tower 版本控制</title>
      <link href="/2020/01/31/Github-Tower-%E7%89%88%E6%9C%AC%E6%8E%A7%E5%88%B6/"/>
      <url>/2020/01/31/Github-Tower-%E7%89%88%E6%9C%AC%E6%8E%A7%E5%88%B6/</url>
      
        <content type="html"><![CDATA[<p>之前都弄好了几次，但是每次都忘记怎么做，所以还是要记录一下</p><ol><li><p>从GitHub 到本地<br> 直接点击tower左下角“+”号，然后将URL复制，使用自己的账户即可实现添加库</p></li><li><p>从本地到 GitHub<br> 首先在GitHub 建立库”test”，然后将该库从GitHub下载到本地文件夹<code>&quot;~/test&quot;</code><br> 再将已有的项目文件放到<code>&quot;~/test&quot;</code>文件夹中，然后push，就行了</p></li></ol>]]></content>
      
      
      
        <tags>
            
            <tag> GitHub </tag>
            
            <tag> Tower </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>NexT主题配置时错误总结</title>
      <link href="/2020/01/22/NexT%E4%B8%BB%E9%A2%98%E9%85%8D%E7%BD%AE%E6%97%B6%E9%94%99%E8%AF%AF%E6%80%BB%E7%BB%93/"/>
      <url>/2020/01/22/NexT%E4%B8%BB%E9%A2%98%E9%85%8D%E7%BD%AE%E6%97%B6%E9%94%99%E8%AF%AF%E6%80%BB%E7%BB%93/</url>
      
        <content type="html"><![CDATA[<ol><li><p>设置menu时，出现下面的错误：</p> <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">ERROR Template render error: (&#x2F;Users&#x2F;mac&#x2F;hexo&#x2F;themes&#x2F;next&#x2F;layout&#x2F;_partials&#x2F;h...</span><br><span class="line">TypeError: Cannot read property &#39;replace&#39; of undefined...</span><br></pre></td></tr></table></figure><p> 发现menu要按以下格式：</p> <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">menu:</span><br><span class="line">  home: &#x2F; || home</span><br><span class="line">  about: &#x2F;about&#x2F; || user</span><br><span class="line">  tags: &#x2F;tags&#x2F; || tags</span><br><span class="line">  categories: &#x2F;categories&#x2F; || th</span><br><span class="line">  archives: &#x2F;archives&#x2F; || archive</span><br></pre></td></tr></table></figure><p> 也就是斜杠和双竖线一个都不能少，<strong>双竖线之后是菜单栏对应项图标的文件名</strong></p><a id="more"></a> </li><li><p>添加标签页代码注意一点要加page，它会生成<code>index.md</code>文件</p> <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new page &quot;tags&quot; &#x2F;&#x2F; right</span><br><span class="line">$ hexo new &quot;tags&quot; &#x2F;&#x2F; wrong!!!</span><br></pre></td></tr></table></figure></li><li><p>多标签要设置成</p> <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">- tag1</span><br><span class="line">- tag2</span><br><span class="line">&quot;-&quot; + &quot;空格&quot; + &quot;标签&quot;</span><br></pre></td></tr></table></figure></li><li><p>hexo本地图片无法显示的问题</p><p> 设置站点配置文件<code>_config.yml</code>:将<code>post_asset_folder: false</code>改为<code>post_asset_folder: true</code><br> 安装插件:<code>npm install https://github.com/CodeFalling/hexo-asset-image -- save</code><br> 运行<code>hexo n &quot;XXXXXX&quot;</code>,生成XXXXX.md博文时就会在/source/_posts目录下生成XXXXXX的文件夹，将你想在XXXXX博文中插入的照片放置到这个同名文件夹中即可，图片的命名随意。<br> 添加图片:在想添加的位置写入<code>&lt;img src=&quot;1.png&quot; width=&quot;100%&quot;&gt;</code><br> ————————————————<br> 版权声明：本文为CSDN博主「Fitz1318」的原创文章，遵循 CC 4.0 BY-SA 版权协议，转载请附上原文出处链接及本声明。<br> 原文链接：<a href="https://blog.csdn.net/Fitz1318/article/details/86548129" target="_blank" rel="noopener">https://blog.csdn.net/Fitz1318/article/details/86548129</a></p></li><li><p>NexT打赏的图片要放在NexT主题文件夹下</p></li></ol>]]></content>
      
      
      
        <tags>
            
            <tag> NexT </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>配置next主题の命令其二：主题进阶设定</title>
      <link href="/2020/01/21/%E9%85%8D%E7%BD%AEnext%E4%B8%BB%E9%A2%98%E3%81%AE%E5%91%BD%E4%BB%A4%E5%85%B6%E4%BA%8C%EF%BC%9A%E4%B8%BB%E9%A2%98%E8%BF%9B%E9%98%B6%E8%AE%BE%E5%AE%9A/"/>
      <url>/2020/01/21/%E9%85%8D%E7%BD%AEnext%E4%B8%BB%E9%A2%98%E3%81%AE%E5%91%BD%E4%BB%A4%E5%85%B6%E4%BA%8C%EF%BC%9A%E4%B8%BB%E9%A2%98%E8%BF%9B%E9%98%B6%E8%AE%BE%E5%AE%9A/</url>
      
        <content type="html"><![CDATA[<style>        .pics img{float: left;}</style><ol><li><p>RSS订阅设置(需求较低，略过)</p></li><li><p>添加「标签」/「分类」页面</p><ol><li><p>添加”tags(categories)”主页面</p> <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ cd hexo</span><br><span class="line">$ hexo new page tags&#x2F;categories</span><br></pre></td></tr></table></figure></li><li><p>编辑刚新建的页面，将页面的类型设置为 tags </p> <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">title: 标签</span><br><span class="line">date: 2020-01-20 22:50:58</span><br><span class="line">type: &quot;tags&#x2F;categories&quot;</span><br></pre></td></tr></table></figure><a id="more"></a></li><li><p>编辑<strong>主题配置文件</strong>， 添加 tags/categories 到 menu 中，如下</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">menu:</span><br><span class="line">home: &#x2F;</span><br><span class="line">archives: &#x2F;archives</span><br><span class="line">tags: &#x2F;tags</span><br><span class="line">categories: &#x2F;categories</span><br></pre></td></tr></table></figure></li></ol></li><li><p>设置字体<br>编辑<strong>主题配置文件</strong>，详情参考font字段</p></li><li><p>设置<strong>代码</strong>高亮主题<br> NexT 使用 Tomorrow Theme 作为代码高亮，默认使用的是 白色的 normal 主题，可选的值有：normal, night, night blue, night bright, night eighties</p> <div class="pics">     <img src="/2020/01/21/%E9%85%8D%E7%BD%AEnext%E4%B8%BB%E9%A2%98%E3%81%AE%E5%91%BD%E4%BB%A4%E5%85%B6%E4%BA%8C%EF%BC%9A%E4%B8%BB%E9%A2%98%E8%BF%9B%E9%98%B6%E8%AE%BE%E5%AE%9A/tomorrow.png" width="20%">     <img src="/2020/01/21/%E9%85%8D%E7%BD%AEnext%E4%B8%BB%E9%A2%98%E3%81%AE%E5%91%BD%E4%BB%A4%E5%85%B6%E4%BA%8C%EF%BC%9A%E4%B8%BB%E9%A2%98%E8%BF%9B%E9%98%B6%E8%AE%BE%E5%AE%9A/tomorrow-night.png" width="20%">     <img src="/2020/01/21/%E9%85%8D%E7%BD%AEnext%E4%B8%BB%E9%A2%98%E3%81%AE%E5%91%BD%E4%BB%A4%E5%85%B6%E4%BA%8C%EF%BC%9A%E4%B8%BB%E9%A2%98%E8%BF%9B%E9%98%B6%E8%AE%BE%E5%AE%9A/tomorrow-night-blue.png" width="20%">     <img src="/2020/01/21/%E9%85%8D%E7%BD%AEnext%E4%B8%BB%E9%A2%98%E3%81%AE%E5%91%BD%E4%BB%A4%E5%85%B6%E4%BA%8C%EF%BC%9A%E4%B8%BB%E9%A2%98%E8%BF%9B%E9%98%B6%E8%AE%BE%E5%AE%9A/tomorrow-night-bright.png" width="20%">     <img src="/2020/01/21/%E9%85%8D%E7%BD%AEnext%E4%B8%BB%E9%A2%98%E3%81%AE%E5%91%BD%E4%BB%A4%E5%85%B6%E4%BA%8C%EF%BC%9A%E4%B8%BB%E9%A2%98%E8%BF%9B%E9%98%B6%E8%AE%BE%E5%AE%9A/tomorrow-night-eighties.png" width="20%"> </div>  <p> 在<strong>主题配置文件</strong>highlight_theme中修改即可<br> （hexo图片设置：用html中的img，然后src=路径，后面加上width=”100%”）</p></li><li><p>侧边栏社交链接<br>在<strong>主题配置文件</strong>中修改social即可</p></li><li><p>打赏功能<br>在<strong>主题配置文件</strong>中添加：</p> <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">reward_comment: 坚持原创技术分享，您的支持将鼓励我继续创作！</span><br><span class="line">wechatpay: &#x2F;path&#x2F;to&#x2F;wechat-reward-image</span><br><span class="line">alipay: &#x2F;path&#x2F;to&#x2F;alipay-reward-image</span><br></pre></td></tr></table></figure></li><li><p>设置「阅读全文」</p><ul><li><p>在文章中使用<code>&lt;!-- more --&gt;</code>手动进行截断，推荐</p></li><li><p>在文章的 front-matter 中添加 description，并提供文章摘录</p></li><li><p>自动形成摘要，在 主题配置文件 中添加：</p>  <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">auto_except:</span><br><span class="line">    enable: true</span><br><span class="line">    length: 150</span><br></pre></td></tr></table></figure></li></ul></li></ol>]]></content>
      
      
      
        <tags>
            
            <tag> hexo </tag>
            
            <tag> NexT </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>配置NexT主题の命令其一：主题基本设定</title>
      <link href="/2020/01/20/%E4%B8%BB%E9%A2%98%E5%9F%BA%E6%9C%AC%E8%AE%BE%E5%AE%9A/"/>
      <url>/2020/01/20/%E4%B8%BB%E9%A2%98%E5%9F%BA%E6%9C%AC%E8%AE%BE%E5%AE%9A/</url>
      
        <content type="html"><![CDATA[<ol><li><p>选择Scheme<br>Scheme是NexT主题下的不同外观<br>目前 NexT 支持三种 Scheme，他们是：<br>Muse - 默认 Scheme，这是 NexT 最初的版本，黑白主调，大量留白<br>Mist - Muse 的紧凑版本，整洁有序的单栏外观<br>Pisces - 双栏 Scheme，小家碧玉似的清新<br>//在<strong>主题配置文件</strong>下更改</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">#scheme: Muse</span><br><span class="line">#scheme: Mist</span><br><span class="line">scheme: Pisces</span><br></pre></td></tr></table></figure><a id="more"></a></li><li><p>设置语言<br>//在<em><em>站点配置文件</em></em>下更改language属性即可</p></li><li><p>设置菜单<br>//在<strong>主题配置文件</strong>下更改</p><ul><li>menu–菜单内容(在<em><em>站点配置文件</em></em>下可更改对应文本)</li><li>menu_icons–菜单图标(注意大小写)</li></ul></li><li><p>设置侧边栏<br>//在<strong>主题配置文件</strong>下更改sidebar属性即可</p></li></ol><ol><li><p>设置头像<br>//在<strong>主题配置文件</strong>下更改avatar字段即可</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">完整的互联网URL: http:&#x2F;&#x2F;example.com&#x2F;avatar.png</span><br><span class="line">站点内的地址: 放置在 source&#x2F;images&#x2F; 目录下-&gt;配置为avatar: &#x2F;images&#x2F;avatar.png</span><br></pre></td></tr></table></figure></li><li><p>第三方服务</p></li></ol><ul><li>百度统计：登录百度统计, 获取hm.js? , 修改<strong>主题配置文件</strong>下baidu_analytics为你的id</li><li>待续</li></ul><p>ex: 这次发布时遇到一个错误</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">YAMLException: can not read a block mapping entry; a multiline key may not be an implicit key at line 4, column 1:</span><br></pre></td></tr></table></figure><p>百度发现在每个md文件头部，属性的冒号后面必须加空格        –2020-01-20 00:46:51</p><p>ex2: 又遇到一个错误</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">YAMLException: can not read a block mapping entry; a multiline key may not be an implicit key at line 699, column 1:</span><br></pre></td></tr></table></figure><p>百度统计仅需把id字段复制粘贴给”baidu_analytics即可“        –2020-01-20 00:50:56</p>]]></content>
      
      
      
        <tags>
            
            <tag> hexo </tag>
            
            <tag> NexT </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Hexo + GitHub = 技术博客</title>
      <link href="/2020/01/17/Hexo-GitHub-%E6%8A%80%E6%9C%AF%E5%8D%9A%E5%AE%A2/"/>
      <url>/2020/01/17/Hexo-GitHub-%E6%8A%80%E6%9C%AF%E5%8D%9A%E5%AE%A2/</url>
      
        <content type="html"><![CDATA[<p>为了之后IOS编程(swift)以及python的学习，想写好技术博客，一是为了记录，便于之后查找；二是为了加强学习的动力和效率<br>本来是想用CSDN或者博客园、简书一类，这些的好处是你写的博客能在百度上被搜到(SEO,搜索引擎优化)，而且比较简单容易上手。但是缺点我是无法接受的：</p><ol><li>广告多，很多功能都需要收费；（纯净性低）</li><li>界面落后，没有美观性可言；（观赏性低）</li><li>无法自定义功能，而且将数据托付给平台，容易被删除。（自由度小）</li></ol><p>于是经过知乎推荐（Jackpop的文章）,按照教程搭建了一个Hexo+GitHub的个人博客页面，网址是：<a href="https://sars666.github.io" target="_blank" rel="noopener">https://sars666.github.io</a></p><p>Hexo配置：<a href="https://hexo.io/zh-cn/docs/configuration" target="_blank" rel="noopener">https://hexo.io/zh-cn/docs/configuration</a><br>next主题：<a href="http://theme-next.iissnan.com" target="_blank" rel="noopener">http://theme-next.iissnan.com</a></p><p>下面简单总结一下部分关键操作<a id="more"></a></p><h2 id="部署博客の命令"><a href="#部署博客の命令" class="headerlink" title="部署博客の命令"></a>部署博客の命令</h2><p>首先进入hexo文件夹 </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ cd hexo</span><br></pre></td></tr></table></figure><p>然后再本地开启服务器，可以在<code>http://localhost:4000</code>预览</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo s   &#x2F;&#x2F;server</span><br></pre></td></tr></table></figure><p>使用new命令即可创建新文章：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new &#39;new page&#39;</span><br></pre></td></tr></table></figure><p>默认情况下，Hexo 会使用文章的标题来决定文章文件的路径。对于独立页面来说，Hexo 会创建一个以标题为名字的目录，并在目录中放置一个 index.md 文件。你可以使用 –path 参数来覆盖上述行为、自行决定文件的目录：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new page --path about&#x2F;me &quot;About me&quot;</span><br></pre></td></tr></table></figure><p>最后可以将修改的部分部署到网站</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo g -d &#x2F;&#x2F;generate</span><br></pre></td></tr></table></figure><p>另外还有一些可能会用到的命令</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$ hexo clean  &#x2F;&#x2F;清除缓存文件</span><br><span class="line">$ hexo publish [layout] &lt;filename&gt;  &#x2F;&#x2F;发表草稿</span><br><span class="line">$ hexo --draft  &#x2F;&#x2F;显示草稿</span><br></pre></td></tr></table></figure><h2 id="配置博客の命令"><a href="#配置博客の命令" class="headerlink" title="配置博客の命令"></a>配置<strong>博客</strong>の命令</h2><p>您可以在 _config.yml 中修改大部分的配置</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">title &#x2F;&#x2F;subtitle &#x2F;&#x2F;description &#x2F;&#x2F;keywords &#x2F;&#x2F;author &#x2F;&#x2F;language &#x2F;&#x2F;timezone 不多介绍</span><br><span class="line">per_page &#x2F;&#x2F;每页显示的文章数</span><br><span class="line">theme &#x2F;&#x2F;当前使用的主题</span><br></pre></td></tr></table></figure><h2 id="配置文章の命令"><a href="#配置文章の命令" class="headerlink" title="配置文章の命令"></a>配置<strong>文章</strong>の命令</h2><p>Front-matter 是文件最上方以 — 分隔的区域，在Front-matter中配置文章属性</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">layout&#x2F;&#x2F;  title&#x2F;&#x2F; date&#x2F;&#x2F; updated&#x2F;&#x2F; tags&#x2F;&#x2F; </span><br><span class="line">comments &#x2F;&#x2F;开启文章的评论功能 默认为true</span><br><span class="line">categories &#x2F;&#x2F;分类具有顺序性和层次性，使用[Game, LOL], [Book, Math] 表关系</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> hexo </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>论文指南</title>
      <link href="/2020/01/17/pytest/"/>
      <url>/2020/01/17/pytest/</url>
      
        <content type="html"><![CDATA[<h2 id="基本要求"><a href="#基本要求" class="headerlink" title="基本要求"></a>基本要求</h2><ol><li>论文的主要内容，是叙述一套方法在一个<font color="red"><strong>特定场合</strong></font>中的应用</li><li>这套方法必须要有所创新或突破，并因而对学术界有所贡献。因此，它或者是解决既有问题的<font color="red"><strong>新方法</strong></font>，或者是既有方法的<font color="red"><strong>新应用</strong></font></li><li>针对这个应用场合，你所提出来的方法确实有比文献中<font color="red"><strong>一切既有方法</strong></font>更优越之处</li><li>任何应用场合，只要能够满足你所提出来的<strong>假设条件</strong>，你的方法就一定适用，而且你所描述的优点就一定会存在</li><li>你还必须要在论文中清楚指出这个方法的<strong>限制和可能的缺点</strong></li><li>行文风格上，它是一篇论证严谨，<strong>逻辑关系清晰</strong>，而且结构有条理的专业论述</li><li>而且，你对这个方法的<strong>每一个步骤</strong>都必须要提供充分的理由说明「为什么非如此不可」</li><li>最后，你的论文必须要在适当位置清楚注明所有和你所研究之题目相关的文献。而且，你必须要记得：只要是和你所研究的问题相关的学术文献（尤其是学术期刊论文），你都有必要全部找出来（如果漏掉就是你的过失），仔细读过。</li><li>第（2）款所谓「对学术界的贡献」，指的是：把你的所有研究成果扣除掉学术界已经发表过的所有成果（不管你实际上有没有参考过，没有参考过也算是你的重大过失），剩下的就是你的贡献</li></ol><h2 id="需求能力"><a href="#需求能力" class="headerlink" title="需求能力"></a>需求能力<a id="more"></a></h2><ol><li>数据检索的能力：你到底要用什么样的关键词和查所程序去保证你已经找出所有相关的文献？这是第一个大的挑战。</li><li>资料筛选的能力：你如何可以只读论文的题目、摘要、简介和结论，而还没有完全看懂内文，就准确地判断出这篇论文中是否有值得你进一步参考的内容，以便快速地把需要仔细读完的论文从数百篇降低到廿、卅篇？</li><li>期刊论文的阅读能力：期刊论文是没头没尾的十几页文献，只交代最核心的创意，并援引许多其它论文的研究成果（但只注明文献出处，而完全没有交代其内容）。因此，要读懂一篇论文，一定要同时读懂数篇或十数篇被援引的其它论文。</li><li>期刊论文的分析能力：一个严格训练过的合格硕士， 他做事的时候应该是不需要有人在背后替他做检证，他自己就应该要有能力分析自己的优、 缺点，主动向上级或平行单位要求支持。其实，至少要能够完成这个能力，才勉强可以说你 是有「独立自主的判断能力」</li><li>创新的能力：大学毕业生的主要能力是吸收既有知识，但硕士毕业生却应该要有 能力创造知识</li></ol><h2 id="读论文"><a href="#读论文" class="headerlink" title="读论文"></a>读论文</h2><h3 id="Abstract"><a href="#Abstract" class="headerlink" title="Abstract"></a>Abstract</h3><p>只看Abstract 和 Introduction 便可以判断出这篇论文的重点和你的研究有没有直接关连，从而决定要不要把它给读完。</p><h3 id="Introduction"><a href="#Introduction" class="headerlink" title="Introduction"></a>Introduction</h3><ol><li>在这领域最常被引用的方法有哪些？</li><li>这些方法可以分成哪些主要派别？</li><li>每个派别的主要特色（优点和缺点）是什么？</li><li>这个领域的关键问题？重点关注的优缺点？应用场合？</li></ol><h3 id="Main-Body"><a href="#Main-Body" class="headerlink" title="Main Body"></a>Main Body</h3><ol><li>这篇论文的主要假设是什么（在什么条件下它是有效的），并且评估一下这些假设在现实条件下有多容易（或多难）成立。愈难成立的假设，愈不好用，参考价值也愈低</li><li>在这些假设下， 这篇论文主要有什么好处</li><li>这些好处主要表现在哪些公式的哪些项目的简化上</li><li>派别的主要缺点</li></ol><h2 id="报告"><a href="#报告" class="headerlink" title="报告"></a>报告</h2><p>报告一篇论文，我要求做到以下部分（依报告次序排列）：</p><ol><li>投影片第一页必须列出论文的题目、作者、论文出处与年份。</li><li>以下每一页投影片只能讲一个观念，不可以在一张投影片里讲两个观念。</li><li>说明这篇论文所研究的问题的重点，以及这个问题可能和工业界的哪些应用相关。</li><li>清楚交代这篇论文的主要假设，主要公式，与主要应用方式（以及应用上可能的解 题流程）。</li><li>说明这篇论文的范例（simulation examples and/or experiments），预测这个方法在不同 场合时可能会有的准确度或好用的程度</li><li>你个人的分析、评价与批评，包括：<ol><li>这篇论文最主要的创意是什么？</li><li>这些创意在应用上有什么好处？</li><li>这些创意和应用上的好处是在哪些条件下才 能成立？</li><li>这篇论文最主要的缺点或局限是什么？</li><li>这些缺点或局限在应 用上有什么坏处？</li><li>这些缺点和应用上的坏处是因为哪些因素而引入的？</li><li>你建议学长学弟什么时候参考这篇论文的哪些部分（点子）？</li></ol></li></ol>]]></content>
      
      
      
        <tags>
            
            <tag> 论文 </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
